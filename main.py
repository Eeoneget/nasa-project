import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import cartopy.feature as cfeature
from datetime import datetime, timedelta

class SharkActivityModel:
    def __init__(self):
        # –ë–∞–∑–æ–≤—ã–µ —Ä–µ–≥–∏–æ–Ω—ã + –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ
        self.regions = {
            'gulf_stream': (35.0, -75.0),
            'california_current': (32.0, -118.0),
            'great_barrier_reef': (-18.0, 147.0),
            'hawaii': (21.0, -157.0),
            'south_africa': (-32.0, 18.0),
            'galapagos': (-0.5, -91.0)
        }
        self.custom_regions = {}

    def add_custom_location(self, name, lat, lon):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
        self.custom_regions[name] = (lat, lon)
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è —Ç–æ—á–∫–∞: {name} ({lat}, {lon})")

    def add_multiple_locations(self, locations_dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π"""
        for name, coords in locations_dict.items():
            self.custom_regions[name] = coords
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(locations_dict)} –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ—á–µ–∫")

    def get_all_regions(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã (–±–∞–∑–æ–≤—ã–µ + –∫–∞—Å—Ç–æ–º–Ω—ã–µ)"""
        return {**self.regions, **self.custom_regions}

    def display_mathematical_formulas(self):
        """–í—ã–≤–æ–¥ –≤—Å–µ—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª –º–æ–¥–µ–ª–∏"""
        print("\n" + "="*80)
        print("–ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –§–û–†–ú–£–õ–´ –ú–û–î–ï–õ–ò –ê–ö–¢–ò–í–ù–û–°–¢–ò –ê–ö–£–õ")
        print("="*80)

        formulas = {
            "1. –û–°–ù–û–í–ù–û–ï –£–†–ê–í–ù–ï–ù–ò–ï –ê–ö–¢–ò–í–ù–û–°–¢–ò": {
                "formula": "SAI = w‚ÇÅ¬∑g(SST) + w‚ÇÇ¬∑h(Chl-a) + w‚ÇÉ¬∑k(|SLA|) + Œµ",
                "description": "–ò–Ω–¥–µ–∫—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫—É–ª –∫–∞–∫ –≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
                "variables": {
                    "SAI": "Shark Activity Index",
                    "w‚ÇÅ, w‚ÇÇ, w‚ÇÉ": "–í–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (0.35, 0.40, 0.25)",
                    "g(SST)": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                    "h(Chl-a)": "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                    "k(|SLA|)": "–í–ª–∏—è–Ω–∏–µ –æ–∫–µ–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Ñ—Ä–æ–Ω—Ç–æ–≤",
                    "Œµ": "–°–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞ ~ N(0, 0.2)"
                }
            },

            "2. –¢–ï–ú–ü–ï–†–ê–¢–£–†–ù–ê–Ø –ü–†–ï–î–ü–û–ß–¢–ò–¢–ï–õ–¨–ù–û–°–¢–¨": {
                "formula": "g(SST) = exp(-0.5 √ó ((SST - Œº) / œÉ)¬≤)",
                "description": "–ì–∞—É—Å—Å–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–ø—Ç–∏–º—É–º–æ–º –ø—Ä–∏ 22¬∞C",
                "variables": {
                    "Œº": "22¬∞C - –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                    "œÉ": "6¬∞C - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ",
                    "SST": "Sea Surface Temperature"
                }
            },

            "3. –ó–ê–í–ò–°–ò–ú–û–°–¢–¨ –û–¢ –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–ò": {
                "formula": "h(Chl-a) = log(1 + Chl-a) √ó (1 - exp(-Chl-a/Œ∏))",
                "description": "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Å –Ω–∞—Å—ã—â–µ–Ω–∏–µ–º",
                "variables": {
                    "Chl-a": "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —Ö–ª–æ—Ä–æ—Ñ–∏–ª–ª–∞-–∞",
                    "Œ∏": "0.3 - –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞—Å—ã—â–µ–Ω–∏—è",
                    "log(1 + Chl-a)": "–£–±—ã–≤–∞—é—â–∞—è –æ—Ç–¥–∞—á–∞ –æ—Ç —Ä–æ—Å—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
                }
            },

            "4. –í–õ–ò–Ø–ù–ò–ï –û–ö–ï–ê–ù–ò–ß–ï–°–ö–ò–• –§–†–û–ù–¢–û–í": {
                "formula": "k(|SLA|) = |SLA| / (Œ± + |SLA|)",
                "description": "–§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—ã—â–µ–Ω–∏—è –ú–∏—Ö–∞—ç–ª–∏—Å–∞-–ú–µ–Ω—Ç–µ–Ω –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤",
                "variables": {
                    "SLA": "Sea Level Anomaly",
                    "Œ±": "0.1 - –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –ø–æ–ª—É–Ω–∞—Å—ã—â–µ–Ω–∏—è",
                    "|SLA|": "–ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ —É—Ä–æ–≤–Ω—è –º–æ—Ä—è"
                }
            },

            "5. –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –ü–ê–†–ê–ú–ï–¢–†–û–í": {
                "formula": "X_norm = (X - Œº_X) / œÉ_X",
                "description": "Z-score –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞",
                "variables": {
                    "X": "–ò—Å—Ö–æ–¥–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä (SST, Chl-a, SLA)",
                    "Œº_X": "–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞",
                    "œÉ_X": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"
                }
            },

            "6. –í–ï–†–û–Ø–¢–ù–û–°–¢–¨ –ö–û–†–ú–Å–ñ–ö–ò": {
                "formula": "P(feeding) = 1 / [1 + exp(-Œ≤¬∑(SAI - SAI‚ÇÄ))]",
                "description": "–°–∏–≥–º–æ–∏–¥–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≥–æ—Ä—è—á–∏—Ö —Ç–æ—á–µ–∫",
                "variables": {
                    "Œ≤": "–ö—Ä—É—Ç–∏–∑–Ω–∞ —Å–∏–≥–º–æ–∏–¥—ã (–æ–±—ã—á–Ω–æ 1.0)",
                    "SAI‚ÇÄ": "–ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                    "P(feeding)": "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ—Ä–º—ë–∂–∫–∏ –æ—Ç 0 –¥–æ 1"
                }
            },

            "7. –ò–ù–î–ï–ö–° –ì–û–†–Ø–ß–ò–• –¢–û–ß–ï–ö": {
                "formula": "Hotspot_Index = P(feeding) √ó |‚àáSST| √ó |‚àáChl-a|",
                "description": "–ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å, —É—á–∏—Ç—ã–≤–∞—é—â–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã",
                "variables": {
                    "|‚àáSST|": "–ì—Ä–∞–¥–∏–µ–Ω—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏",
                    "|‚àáChl-a|": "–ì—Ä–∞–¥–∏–µ–Ω—Ç —Ö–ª–æ—Ä–æ—Ñ–∏–ª–ª–∞",
                    "P(feeding)": "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ—Ä–º—ë–∂–∫–∏"
                }
            }
        }

        for section, content in formulas.items():
            print(f"\n{section}")
            print("-" * 50)
            print(f"–§–æ—Ä–º—É–ª–∞: {content['formula']}")
            print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {content['description']}")
            print("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
            for var, desc in content['variables'].items():
                print(f"  {var}: {desc}")

        print("\n" + "="*80)
        print("–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –í –ö–û–î–ï:")
        print("="*80)
        print("""
# –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
temp_pref = np.exp(-0.5 * ((df['sst'] - 22) / 6) ** 2)

# –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –Ω–∞—Å—ã—â–µ–Ω–∏–µ–º
productivity = np.log(1 + df['chlorophyll']) * (1 - np.exp(-df['chlorophyll'] / 0.3))

# –û–∫–µ–∞–Ω–∏—á–µ—Å–∫–∏–µ —Ñ—Ä–æ–Ω—Ç—ã
fronts = np.abs(df['sea_level_anomaly']) / (0.1 + np.abs(df['sea_level_anomaly']))

# –§–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
shark_activity = (0.35 * temp_pref_norm + 0.40 * prod_norm + 0.25 * fronts_norm)
        """)

        return formulas

    def simulate_nasa_satellite_data(self, lat, lon, days=365):
        """–°–∏–º—É–ª—è—Ü–∏—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö NASA"""
        dates = pd.date_range(end=datetime.now(), periods=days, freq='D')

        t = np.arange(days)
        seasonal = np.sin(2 * np.pi * t / 365)

        # Sea Surface Temperature (MODIS/Aqua)
        sst_base = 15 + 10 * (1 + np.sin(np.radians(lat))) / 2
        sst = sst_base + 5 * seasonal + np.random.normal(0, 1, days)

        # Chlorophyll-a (Ocean Color)
        chlor_base = 0.1 + 0.5 * np.abs(np.sin(np.radians(lat)))
        chlorophyll = np.maximum(0.01, chlor_base + 0.3 * seasonal + np.random.normal(0, 0.1, days))

        # Sea Level Anomaly (Jason-3)
        sla = np.random.normal(0, 0.15, days) + 0.1 * seasonal

        # Salinity (SMAP)
        salinity = 35 + 2 * np.random.normal(0, 0.5, days)

        return pd.DataFrame({
            'date': dates, 'lat': lat, 'lon': lon,
            'sst': sst, 'chlorophyll': chlorophyll,
            'sea_level_anomaly': sla, 'salinity': salinity
        })

    def calculate_shark_activity(self, df):
        """–†–∞—Å—á–µ—Ç –∏–Ω–¥–µ–∫—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫—É–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª"""
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Ñ–æ—Ä–º—É–ª–∞ 5)
        sst_norm = (df['sst'] - df['sst'].mean()) / df['sst'].std()
        chlor_norm = (df['chlorophyll'] - df['chlorophyll'].mean()) / df['chlorophyll'].std()
        sla_norm = (np.abs(df['sea_level_anomaly']) - np.abs(df['sea_level_anomaly']).mean()) / np.abs(df['sea_level_anomaly']).std()

        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Ñ–æ—Ä–º—É–ª–∞ 2)
        temp_pref = np.exp(-0.5 * ((df['sst'] - 22) / 6) ** 2)
        temp_pref_norm = (temp_pref - temp_pref.mean()) / temp_pref.std()

        # –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –Ω–∞—Å—ã—â–µ–Ω–∏–µ–º (—Ñ–æ—Ä–º—É–ª–∞ 3)
        productivity = np.log(1 + df['chlorophyll']) * (1 - np.exp(-df['chlorophyll'] / 0.3))
        prod_norm = (productivity - productivity.mean()) / productivity.std()

        # –§—Ä–æ–Ω—Ç—ã –æ–∫–µ–∞–Ω–∞ (—Ñ–æ—Ä–º—É–ª–∞ 4)
        fronts = np.abs(df['sea_level_anomaly']) / (0.1 + np.abs(df['sea_level_anomaly']))
        fronts_norm = (fronts - fronts.mean()) / fronts.std()

        # –ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å (—Ñ–æ—Ä–º—É–ª–∞ 1)
        shark_activity = (0.35 * temp_pref_norm +
                         0.40 * prod_norm +
                         0.25 * fronts_norm +
                         np.random.normal(0, 0.2, len(df)))

        return shark_activity

    def collect_global_data(self):
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ (–±–∞–∑–æ–≤—ã—Ö + –∫–∞—Å—Ç–æ–º–Ω—ã—Ö)"""
        all_data = []
        all_regions = self.get_all_regions()

        print("üì° –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö NASA...")
        print(f"–í—Å–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(all_regions)}")

        for region_name, (lat, lon) in all_regions.items():
            print(f"   üìç –û–±—Ä–∞–±–æ—Ç–∫–∞: {region_name} ({lat:.1f}, {lon:.1f})")
            region_data = self.simulate_nasa_satellite_data(lat, lon)
            region_data['region'] = region_name
            region_data['is_custom'] = region_name in self.custom_regions
            all_data.append(region_data)

        global_data = pd.concat(all_data, ignore_index=True)
        global_data['shark_activity'] = self.calculate_shark_activity(global_data)

        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã: {len(global_data)} –∑–∞–ø–∏—Å–µ–π")
        return global_data

    def plot_relationships(self, data):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ—á–µ–∫"""
        fig, axes = plt.subplots(2, 3, figsize=(18, 12))
        fig.suptitle('–í–∑–∞–∏–º–æ—Å–≤—è–∑–∏ –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∞–∫—É–ª –∏ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ NASA\n(–ñ—ë–ª—Ç—ã–µ —Ç–æ—á–∫–∏ - –∫–∞—Å—Ç–æ–º–Ω—ã–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è)',
                    fontsize=14, fontweight='bold')

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –±–∞–∑–æ–≤—ã–µ –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ
        base_data = data[~data['is_custom']]
        custom_data = data[data['is_custom']]

        # 1. SST vs Shark Activity
        sc1_base = axes[0,0].scatter(base_data['sst'], base_data['shark_activity'],
                                    c=base_data['chlorophyll'], cmap='viridis', alpha=0.6, s=20)
        if len(custom_data) > 0:
            sc1_custom = axes[0,0].scatter(custom_data['sst'], custom_data['shark_activity'],
                                          c='yellow', alpha=0.8, s=60, edgecolors='black', label='–ö–∞—Å—Ç–æ–º–Ω—ã–µ')
            axes[0,0].legend()
        axes[0,0].set_xlabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –º–æ—Ä—è (¬∞C)')
        axes[0,0].set_ylabel('–ò–Ω–¥–µ–∫—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫—É–ª')
        axes[0,0].set_title('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–∫—É–ª vs –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞')
        axes[0,0].grid(True, alpha=0.3)
        plt.colorbar(sc1_base, ax=axes[0,0], label='–•–ª–æ—Ä–æ—Ñ–∏–ª–ª-–∞ (mg/m¬≥)')

        # 2. Chlorophyll vs Shark Activity
        sc2_base = axes[0,1].scatter(base_data['chlorophyll'], base_data['shark_activity'],
                                    c=base_data['sst'], cmap='plasma', alpha=0.6, s=20)
        if len(custom_data) > 0:
            axes[0,1].scatter(custom_data['chlorophyll'], custom_data['shark_activity'],
                            c='yellow', alpha=0.8, s=60, edgecolors='black')
        axes[0,1].set_xlabel('–•–ª–æ—Ä–æ—Ñ–∏–ª–ª-–∞ (mg/m¬≥)')
        axes[0,1].set_ylabel('–ò–Ω–¥–µ–∫—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫—É–ª')
        axes[0,1].set_title('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–∫—É–ª vs –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')
        axes[0,1].grid(True, alpha=0.3)
        plt.colorbar(sc2_base, ax=axes[0,1], label='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')

        # 3. Sea Level Anomaly vs Shark Activity
        sc3_base = axes[0,2].scatter(np.abs(base_data['sea_level_anomaly']), base_data['shark_activity'],
                                    c=base_data['chlorophyll'], cmap='viridis', alpha=0.6, s=20)
        if len(custom_data) > 0:
            axes[0,2].scatter(np.abs(custom_data['sea_level_anomaly']), custom_data['shark_activity'],
                            c='yellow', alpha=0.8, s=60, edgecolors='black')
        axes[0,2].set_xlabel('–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –∞–Ω–æ–º–∞–ª–∏—è —É—Ä–æ–≤–Ω—è –º–æ—Ä—è (–º)')
        axes[0,2].set_ylabel('–ò–Ω–¥–µ–∫—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫—É–ª')
        axes[0,2].set_title('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–∫—É–ª vs –û–∫–µ–∞–Ω–∏—á–µ—Å–∫–∏–µ —Ñ—Ä–æ–Ω—Ç—ã')
        axes[0,2].grid(True, alpha=0.3)
        plt.colorbar(sc3_base, ax=axes[0,2], label='–•–ª–æ—Ä–æ—Ñ–∏–ª–ª-–∞ (mg/m¬≥)')

        # 4. –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
        first_region = data['region'].iloc[0]
        region_data = data[data['region'] == first_region].copy().sort_values('date')

        axes[1,0].plot(region_data['date'], region_data['shark_activity'],
                      'r-', linewidth=2, label='–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–∫—É–ª')
        axes[1,0].set_xlabel('–î–∞—Ç–∞')
        axes[1,0].set_ylabel('–ò–Ω–¥–µ–∫—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', color='red')
        axes[1,0].tick_params(axis='y', labelcolor='red')
        axes[1,0].set_title(f'–°–µ–∑–æ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞: {first_region}')
        axes[1,0].grid(True, alpha=0.3)
        axes[1,0].legend(loc='upper left')

        ax2 = axes[1,0].twinx()
        ax2.plot(region_data['date'], region_data['sst'], 'b-', alpha=0.7, label='SST')
        ax2.set_ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)', color='blue')
        ax2.tick_params(axis='y', labelcolor='blue')
        ax2.legend(loc='upper right')

        # 5. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
        corr_data = data[['sst', 'chlorophyll', 'sea_level_anomaly', 'shark_activity']]
        corr_matrix = corr_data.corr()

        im = axes[1,1].imshow(corr_matrix.values, cmap='coolwarm', vmin=-1, vmax=1, aspect='auto')
        axes[1,1].set_xticks(range(len(corr_matrix.columns)))
        axes[1,1].set_yticks(range(len(corr_matrix.columns)))
        axes[1,1].set_xticklabels(corr_matrix.columns, rotation=45)
        axes[1,1].set_yticklabels(corr_matrix.columns)
        axes[1,1].set_title('–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π')

        for i in range(len(corr_matrix.columns)):
            for j in range(len(corr_matrix.columns)):
                axes[1,1].text(j, i, f'{corr_matrix.iloc[i, j]:.2f}',
                              ha='center', va='center', fontweight='bold')

        # 6. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        region_activity = data.groupby('region')['shark_activity'].mean().sort_values(ascending=True)
        colors = ['yellow' if reg in self.custom_regions else 'blue' for reg in region_activity.index]

        bars = axes[1,2].barh(range(len(region_activity)), region_activity.values, color=colors, alpha=0.7)
        axes[1,2].set_yticks(range(len(region_activity)))
        axes[1,2].set_yticklabels(region_activity.index)
        axes[1,2].set_xlabel('–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–∫—É–ª')
        axes[1,2].set_title('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–∫—É–ª –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º\n(–∂—ë–ª—Ç—ã–µ - –∫–∞—Å—Ç–æ–º–Ω—ã–µ)')
        axes[1,2].grid(True, alpha=0.3, axis='x')

        plt.tight_layout()
        plt.show()

        return fig

    def create_global_map(self, data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏"""
        region_avg = data.groupby('region').agg({
            'shark_activity': 'mean',
            'lat': 'first',
            'lon': 'first',
            'sst': 'mean',
            'chlorophyll': 'mean',
            'is_custom': 'first'
        }).reset_index()

        fig = plt.figure(figsize=(16, 10))
        ax = plt.axes(projection=ccrs.PlateCarree())

        ax.add_feature(cfeature.LAND, color='lightgray')
        ax.add_feature(cfeature.COASTLINE, linewidth=0.5)
        ax.add_feature(cfeature.BORDERS, linewidth=0.3)
        ax.add_feature(cfeature.OCEAN, color='lightblue', alpha=0.3)
        ax.gridlines(draw_labels=True, linewidth=0.5, color='gray', alpha=0.5)

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –±–∞–∑–æ–≤—ã–µ –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–æ—á–∫–∏
        base_points = region_avg[~region_avg['is_custom']]
        custom_points = region_avg[region_avg['is_custom']]

        # –ë–∞–∑–æ–≤—ã–µ —Ç–æ—á–∫–∏
        scatter_base = ax.scatter(base_points['lon'], base_points['lat'],
                                c=base_points['shark_activity'],
                                s=base_points['chlorophyll'] * 800,
                                cmap='hot', alpha=0.7,
                                edgecolors='black', linewidth=0.5,
                                transform=ccrs.PlateCarree())

        # –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–æ—á–∫–∏ (–≤—ã–¥–µ–ª—è–µ–º)
        if len(custom_points) > 0:
            scatter_custom = ax.scatter(custom_points['lon'], custom_points['lat'],
                                      c=custom_points['shark_activity'],
                                      s=custom_points['chlorophyll'] * 1000,  # –ë–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä
                                      cmap='hot', alpha=1.0,
                                      edgecolors='red', linewidth=2,  # –ö—Ä–∞—Å–Ω–∞—è –æ–±–≤–æ–¥–∫–∞
                                      marker='*',  # –ó–≤–µ–∑–¥–æ—á–∫–∞ –≤–º–µ—Å—Ç–æ –∫—Ä—É–≥–∞
                                      transform=ccrs.PlateCarree())

        # –ü–æ–¥–ø–∏—Å–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤
        for i, row in region_avg.iterrows():
            color = 'red' if row['is_custom'] else 'black'
            weight = 'bold' if row['is_custom'] else 'normal'
            ax.text(row['lon'] + 2, row['lat'], row['region'],
                   fontsize=8, fontweight=weight, color=color,
                   transform=ccrs.PlateCarree())

        cbar = plt.colorbar(scatter_base, ax=ax, shrink=0.6)
        cbar.set_label('–ò–Ω–¥–µ–∫—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫—É–ª', fontsize=12)

        title = '–ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –æ–∂–∏–¥–∞–µ–º–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫—É–ª\n'
        title += 'üî¥ –ó–≤–µ–∑–¥–æ—á–∫–∏ - –∫–∞—Å—Ç–æ–º–Ω—ã–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è'
        ax.set_title(title, fontsize=14, fontweight='bold', pad=20)

        plt.tight_layout()
        plt.show()

        return fig

    def generate_hotspot_predictions(self, data):
        """–ê–Ω–∞–ª–∏–∑ –≥–æ—Ä—è—á–∏—Ö —Ç–æ—á–µ–∫ —Å —É—á–µ—Ç–æ–º –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π"""
        print("\nüîç –ê–Ω–∞–ª–∏–∑ –≥–æ—Ä—è—á–∏—Ö —Ç–æ—á–µ–∫ –∫–æ—Ä–º—ë–∂–∫–∏...")

        threshold = np.percentile(data['shark_activity'], 80)
        hotspots = data[data['shark_activity'] > threshold]

        print(f"–ü–æ—Ä–æ–≥ –≥–æ—Ä—è—á–∏—Ö —Ç–æ—á–µ–∫: {threshold:.2f}")
        print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≥–æ—Ä—è—á–∏—Ö —Ç–æ—á–µ–∫: {len(hotspots)}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Ä–µ–≥–∏–æ–Ω–∞–º
        region_stats = data.groupby('region').agg({
            'shark_activity': ['mean', 'max', 'count'],
            'sst': 'mean',
            'chlorophyll': 'mean',
            'is_custom': 'first'
        }).round(3)

        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Ä–µ–≥–∏–æ–Ω–∞–º:")
        for region in region_stats.index:
            stats = region_stats.loc[region]
            custom_mark = " üî¥" if stats[('is_custom', 'first')] else ""
            print(f"  {region}{custom_mark}: –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å={stats[('shark_activity', 'mean')]:.2f}, "
                  f"SST={stats[('sst', 'mean')]:.1f}¬∞C, —Ö–ª–æ—Ä–æ—Ñ–∏–ª–ª={stats[('chlorophyll', 'mean')]:.2f}")

        return hotspots

# üöÄ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –ó–ê–ü–£–°–ö
def interactive_analysis():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –º–æ–¥–µ–ª–∏ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏"""
    print("ü¶à –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ú–û–î–ï–õ–¨ –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò –ê–ö–£–õ NASA")
    print("=" * 60)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
    shark_model = SharkActivityModel()

    # 1. –ü–æ–∫–∞–∑ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª
    shark_model.display_mathematical_formulas()

    # 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ—á–µ–∫
    print("\nüìç –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–ê–°–¢–û–ú–ù–´–• –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–ô")
    print("-" * 40)

    # –ü—Ä–∏–º–µ—Ä –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ—á–µ–∫ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    custom_locations = {
        'my_research_area': (40.0, -70.0),
        'test_zone': (-20.0, 120.0),
        'north_pacific': (45.0, -160.0)
    }

    shark_model.add_multiple_locations(custom_locations)

    # 3. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    print("\nüì° –°–ë–û–† –î–ê–ù–ù–´–•")
    print("-" * 40)
    nasa_data = shark_model.collect_global_data()

    # 4. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    print("\nüìà –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("-" * 40)
    print("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π...")
    shark_model.plot_relationships(nasa_data)

    print("–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã...")
    shark_model.create_global_map(nasa_data)

    # 5. –ê–Ω–∞–ª–∏–∑
    hotspots = shark_model.generate_hotspot_predictions(nasa_data)

    print("\n‚úÖ –ú–û–î–ï–õ–¨ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ò–õ–ê –†–ê–ë–û–¢–£!")
    print("=" * 60)

    return shark_model, nasa_data

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    model, data = interactive_analysis()

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\nüí° –ö–ê–ö –î–û–ë–ê–í–ò–¢–¨ –°–í–û–ò –¢–û–ß–ö–ò:")
    print("""
    # –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ—á–µ–∫:
    model.add_custom_location('–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ç–æ—á–∫–∏', —à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞)

    # –ò–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫ —Å—Ä–∞–∑—É:
    custom_points = {
        '—Ç–æ—á–∫–∞_1': (55.0, 37.0),
        '—Ç–æ—á–∫–∞_2': (60.0, 30.0)
    }
    model.add_multiple_locations(custom_points)

    # –ó–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö:
    new_data = model.collect_global_data()
    """)
